{
  "$schema": "https://raw.githubusercontent.com/cursorinsight/templates/main/schemas/rules.schema.json",

  "rules": [
    {
      "pattern": "src/**/*.tsx",
      "instructions": [
        "Use TypeScript with strict typing.",
        "Use functional components only.",
        "Use Tailwind CSS for all styling. Do NOT use inline styles or external CSS files.",
        "Use self-contained, role-based logic where applicable (e.g. show HR sidebar for hr role only)."
      ]
    },
    {
      "pattern": "src/**/*.ts",
      "instructions": [
        "Use TypeScript for all utility, hook, and service files.",
        "Ensure strict typing and define types/interfaces for API responses and data models.",
        "Prefer named exports for maintainability."
      ]
    },
    {
      "pattern": "src/layouts/**/*.tsx",
      "instructions": [
        "Create responsive layouts using Tailwind grid or flex utilities.",
        "Include a sidebar and topbar in `DashboardLayout.tsx`.",
        "Sidebar menu should change based on user role (platform vs tenant).",
        "Implement `toggleSidebar` prop for mobile responsiveness."
      ]
    },
    {
      "pattern": "src/pages/**/*.tsx",
      "instructions": [
        "Each page should be a functional component with minimal logic.",
        "Only handle UI rendering here. Use hooks or services for logic.",
        "Use placeholders or mock data for now if real data is not available."
      ]
    },
    {
      "pattern": "src/hooks/useAuth.ts",
      "instructions": [
        "Create a custom hook that reads JWT from localStorage or cookie.",
        "Decode the token using `jwt-decode` to extract `platform_role`, `tenant_role`, and `tenant_id`.",
        "Provide auth info and login status reactively.",
        "Use appropriate TypeScript types for token and auth state."
      ]
    },
    {
      "pattern": "src/router/AppRouter.tsx",
      "instructions": [
        "Use `react-router-dom` v6 with `BrowserRouter`, `Routes`, and `Route`.",
        "Use `Navigate` to redirect users to the correct dashboard after login based on role.",
        "Support `ProtectedRoute` and `RoleGuard` components for route-based access control."
      ]
    },
    {
      "pattern": "tailwind.config.js",
      "instructions": [
        "Extend the default theme with Inter font and a primary color (blue).",
        "Include content from `./index.html` and all `src/**/*.{ts,tsx}`."
      ]
    },
    {
      "pattern": "src/components/**/*.tsx",
      "instructions": [
        "Make reusable components: `Button`, `Input`, `Sidebar`, `TopBar`.",
        "Use Tailwind for styling; support `className` override.",
        "Ensure all props are typed using interfaces."
      ]
    },
    {
      "pattern": "src/services/api.ts",
      "instructions": [
        "Create a reusable Axios instance with token support via interceptors.",
        "Add example GET and POST requests with mocked endpoints.",
        "Use TypeScript interfaces for request/response typing."
      ]
    }
  ]
}
